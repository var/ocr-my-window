{"version":3,"sources":["components/TesseractTabLens.js","App.js","serviceWorker.js","index.js"],"names":["TesseractTabLens","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_capture","window","chrome","tabs","captureVisibleTab","dataUrl","setState","capturedImage","job","Tesseract","recognize","progress","then","result","console","log","confidence","text","_renderText","react_default","a","createElement","style","width","rows","state","_this$state","Math","trunc","className","src","height","Component","App","tabs_default","justified","tab_default","value","label","components_TesseractTabLens","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRA8DeA,cAzDX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAcVQ,SAAW,WACQC,OAAOC,OACfC,KAAKC,kBAAkB,GAAI,SAAAC,GAC9BZ,EAAKa,SAAS,CACVC,cAAeF,IAEnB,IAAMG,EAAMC,IAAUC,UAAUL,GAEhCG,EAAIG,SAAS,SAAAA,GAAQ,OAAIlB,EAAKa,SAASK,KACvCH,EAAII,KAAK,SAAAC,GACLC,QAAQC,IAAIF,GACZpB,EAAKa,SAAS,CACVU,WAAYH,EAAOG,WACnBC,KAAMJ,EAAOI,YA5BXxB,EAkClByB,YAAc,WACV,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yDACAF,EAAAC,EAAAC,cAAA,YAAUC,MAAO,CAACC,MAAO,QAASC,KAAM,IACzC/B,EAAKgC,MAAMR,QApClBxB,EAAKgC,MAAQ,CACTlB,cAAe,KACfS,WAAY,EACZC,KAAM,GACNN,SAAU,GAPAlB,mFAYdG,KAAKI,4CAgCA,IAAA0B,EACiC9B,KAAK6B,MAAnCT,EADHU,EACGV,WAAYT,EADfmB,EACenB,cACdI,EAAWgB,KAAKC,MAA4B,IAAtBhC,KAAK6B,MAAMd,UACvC,OACIQ,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACXV,EAAAC,EAAAC,cAAA,OAAKS,IAAKvB,EAAegB,MAAO,IAAKQ,OAAQ,MAC5CpB,EAAW,GAAKA,EAAW,IAAMQ,EAAAC,EAAAC,cAAA,SAAI,kBAAoBV,EAAW,KAAW,GAC/EK,EAAa,EAAIpB,KAAKsB,cAAgB,WArDxBc,8CCchBC,mLARX,OACQd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAMe,WAAW,GACbhB,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAKiB,MAAM,SAASC,MAAM,gBAAenB,EAAAC,EAAAC,cAACkB,EAAD,eALvCP,aCMEQ,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.17c146bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Tesseract from 'tesseract.js' ;\n\nclass TesseractTabLens extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            capturedImage: null,\n            confidence: 0,\n            text: '',\n            progress: 0\n        };\n    }\n\n    componentDidMount() {\n        this._capture();\n    }\n\n    _capture = () => {\n        const chrome = window.chrome;\n        chrome.tabs.captureVisibleTab({}, dataUrl => {\n            this.setState({\n                capturedImage: dataUrl\n            });\n            const job = Tesseract.recognize(dataUrl);\n\n            job.progress(progress => this.setState(progress));\n            job.then(result => {\n                console.log(result);\n                this.setState({\n                    confidence: result.confidence,\n                    text: result.text,\n                });\n            });\n        });\n    };\n\n    _renderText = () => {\n        return (\n            <div>\n                <p>View full result in console of the extension</p>\n                <textarea style={{width: '100%'}} rows={15}>\n              {this.state.text}\n            </textarea>\n            </div>)\n    };\n\n    render() {\n        const { confidence, capturedImage } = this.state;\n        const progress = Math.trunc(this.state.progress * 100);\n        return (\n            <div className=\"App\">\n                <img src={capturedImage} width={360} height={240} />\n                {progress > 0 && progress < 100 ? <p>{'recognizing... ' + progress + '%'}</p> : ''}\n                {confidence > 0 ? this._renderText() : ''}\n            </div>\n        );\n    }\n}\n\nexport default TesseractTabLens;\n","import React, { Component } from 'react';\nimport './App.css';\nimport TesseractTabLens from \"./components/TesseractTabLens\";\nimport Tabs from 'muicss/lib/react/tabs';\nimport Tab from 'muicss/lib/react/tab';\n\nclass App extends Component {\n\n  render() {\n    return (\n            <Tabs justified={true}>\n                <Tab value=\"pane-1\" label=\"Tesseract.js\"><TesseractTabLens /></Tab>\n            </Tabs>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}